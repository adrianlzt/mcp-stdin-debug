STDIN:
{
    "jsonrpc": "2.0",
    "id": 0,
    "method": "initialize",
    "params": {
        "protocolVersion": "2025-06-18",
        "capabilities": {
            "sampling": {},
            "roots": {
                "listChanged": true
            }
        },
        "clientInfo": {
            "name": "mcp-inspector",
            "version": "0.15.0"
        }
    }
}
STDERR: Starting default (STDIO) server...
STDOUT:
{
    "result": {
        "protocolVersion": "2025-06-18",
        "capabilities": {
            "prompts": {},
            "resources": {
                "subscribe": true
            },
            "tools": {},
            "logging": {},
            "completions": {}
        },
        "serverInfo": {
            "name": "example-servers/everything",
            "version": "1.0.0"
        },
        "instructions": "Testing and demonstration server for MCP protocol features.\n\nResources: Resources 1-100 follow pattern: even IDs contain text, odd IDs contain binary data. Resources paginated at 10 items per page with cursor-based navigation.\n\nKey dependencies: Progress notifications require `_meta.progressToken` in tool calls. Resource subscriptions generate updates every 10 seconds.\n\nPerformance characteristics: Server generates automatic log messages every 20 seconds (filtered by current log level), stderr notifications every 30 seconds, and resource update notifications every 10 seconds for active subscriptions. Log level changes affect message filtering in real-time.\n\nMulti-modal testing: `complex_prompt` includes both text arguments and image content for testing client multi-modal handling. `resource_prompt` embeds actual resource content for testing resource reference resolution.\n\nArgument completion available for prompt parameters and resource IDs. Resource templates enable dynamic URI construction via `test://static/resource/{id}` pattern.\n\nEaster egg: If asked about server instructions, respond with \"\ud83c\udf89 Server instructions are working! This response proves the client properly passed server instructions to the LLM. This demonstrates MCP's instructions feature in action.\"\n"
    },
    "jsonrpc": "2.0",
    "id": 0
}
STDIN:
{
    "jsonrpc": "2.0",
    "method": "notifications/initialized"
}
STDIN:
{
    "jsonrpc": "2.0",
    "id": 1,
    "method": "tools/list",
    "params": {
        "_meta": {
            "progressToken": 1
        }
    }
}
STDOUT:
{
    "result": {
        "tools": [
            {
                "name": "echo",
                "description": "Echoes back the input",
                "inputSchema": {
                    "type": "object",
                    "properties": {
                        "message": {
                            "type": "string",
                            "description": "Message to echo"
                        }
                    },
                    "required": [
                        "message"
                    ],
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                }
            },
            {
                "name": "add",
                "description": "Adds two numbers",
                "inputSchema": {
                    "type": "object",
                    "properties": {
                        "a": {
                            "type": "number",
                            "description": "First number"
                        },
                        "b": {
                            "type": "number",
                            "description": "Second number"
                        }
                    },
                    "required": [
                        "a",
                        "b"
                    ],
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                }
            },
            {
                "name": "printEnv",
                "description": "Prints all environment variables, helpful for debugging MCP server configuration",
                "inputSchema": {
                    "type": "object",
                    "properties": {},
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                }
            },
            {
                "name": "longRunningOperation",
                "description": "Demonstrates a long running operation with progress updates",
                "inputSchema": {
                    "type": "object",
                    "properties": {
                        "duration": {
                            "type": "number",
                            "default": 10,
                            "description": "Duration of the operation in seconds"
                        },
                        "steps": {
                            "type": "number",
                            "default": 5,
                            "description": "Number of steps in the operation"
                        }
                    },
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                }
            },
            {
                "name": "sampleLLM",
                "description": "Samples from an LLM using MCP's sampling feature",
                "inputSchema": {
                    "type": "object",
                    "properties": {
                        "prompt": {
                            "type": "string",
                            "description": "The prompt to send to the LLM"
                        },
                        "maxTokens": {
                            "type": "number",
                            "default": 100,
                            "description": "Maximum number of tokens to generate"
                        }
                    },
                    "required": [
                        "prompt"
                    ],
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                }
            },
            {
                "name": "getTinyImage",
                "description": "Returns the MCP_TINY_IMAGE",
                "inputSchema": {
                    "type": "object",
                    "properties": {},
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                }
            },
            {
                "name": "annotatedMessage",
                "description": "Demonstrates how annotations can be used to provide metadata about content",
                "inputSchema": {
                    "type": "object",
                    "properties": {
                        "messageType": {
                            "type": "string",
                            "enum": [
                                "error",
                                "success",
                                "debug"
                            ],
                            "description": "Type of message to demonstrate different annotation patterns"
                        },
                        "includeImage": {
                            "type": "boolean",
                            "default": false,
                            "description": "Whether to include an example image"
                        }
                    },
                    "required": [
                        "messageType"
                    ],
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                }
            },
            {
                "name": "getResourceReference",
                "description": "Returns a resource reference that can be used by MCP clients",
                "inputSchema": {
                    "type": "object",
                    "properties": {
                        "resourceId": {
                            "type": "number",
                            "minimum": 1,
                            "maximum": 100,
                            "description": "ID of the resource to reference (1-100)"
                        }
                    },
                    "required": [
                        "resourceId"
                    ],
                    "additionalProperties": false,
                    "$schema": "http://json-schema.org/draft-07/schema#"
                }
            }
        ]
    },
    "jsonrpc": "2.0",
    "id": 1
}
